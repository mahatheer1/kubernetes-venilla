
Kubernetes Vanilla Installation Guide

*(v1.30 - Single Master + Worker Node)*
üîß Prerequisites

    2x Ubuntu 22.04/20.04 VMs (1 Master, 1 Worker)

    2+ vCPUs, 2GB+ RAM per node

    Swap disabled on all nodes (sudo swapoff -a + remove from /etc/fstab)

    Root access (or sudo privileges)

üöÄ Master Node Setup
1. Install Container Runtime (containerd)
bash

sudo apt update && sudo apt install -y containerd
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

2. Install Kubernetes Tools
bash

sudo apt update && sudo apt install -y apt-transport-https curl
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

3. Initialize the Cluster
bash

sudo kubeadm init --pod-network-cidr=10.244.0.0/16

After success, run:
bash

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

4. Install CNI Plugin (Calico)
bash

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml

Verify nodes are Ready:
bash

kubectl get nodes -w

5. Create a Non-Expiring Join Token
bash

kubeadm token create --ttl 0 --description "Permanent worker join token"

Example Output:
text

kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>

(Save this command for worker nodes.)
üõ†Ô∏è Worker Node Setup
1. Install Dependencies (Same as Master)
bash

sudo apt update && sudo apt install -y apt-transport-https curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

2. Enable IP Forwarding
bash

echo "net.ipv4.ip_forward=1" | sudo tee /etc/sysctl.d/99-kubernetes-ip-forward.conf
sudo sysctl --system

3. Join the Cluster
bash

sudo kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>

(Use the token from Step 5 above.)

Verify on the master:
bash

kubectl get nodes

‚ôªÔ∏è Cluster Reset (If Needed)
On Master/Worker Nodes
bash

sudo kubeadm reset -f
sudo rm -rf /etc/cni/net.d /var/lib/etcd /var/lib/kubelet /etc/kubernetes
sudo iptables -F && sudo iptables -t nat -F
sudo systemctl restart containerd
